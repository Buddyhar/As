import hashlib
import time
import os
import binascii
from termcolor import colored

def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def print_and_wait(message, delay=1.5):
    print(message)
    time.sleep(delay)

def sha256_constants():
    # SHA-256 constants for hash computation
    k = [
        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
        0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
        0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
        0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
        0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
        0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
        0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
        0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
        0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    ]
    return k

def sha256_initial_hash_values():
    # Initial hash values (h0-h7) for SHA-256
    h = [
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    ]
    return h

def sha256_rotate_right(x, n):
    # Circular right shift operation
    return ((x >> n) | (x << (32 - n))) & 0xFFFFFFFF

def sha256_compression(chunk, h):
    # Perform compression on a 512-bit chunk using SHA-256
    k = sha256_constants()

    # Prepare message schedule (W[t])
    w = [0] * 64
    for t in range(16):
        w[t] = int(chunk[t * 32:(t + 1) * 32], 2)
    for t in range(16, 64):
        s0 = sha256_rotate_right(w[t - 15], 7) ^ sha256_rotate_right(w[t - 15], 18) ^ (w[t - 15] >> 3)
        s1 = sha256_rotate_right(w[t - 2], 17) ^ sha256_rotate_right(w[t - 2], 19) ^ (w[t - 2] >> 10)
        w[t] = (w[t - 16] + s0 + w[t - 7] + s1) & 0xFFFFFFFF

    # Initialize working variables
    a, b, c, d, e, f, g, h = h

    # Main compression loop
    for t in range(64):
        s1 = sha256_rotate_right(e, 6) ^ sha256_rotate_right(e, 11) ^ sha256_rotate_right(e, 25)
        ch = (e & f) ^ (~e & g)
        temp1 = (h + s1 + ch + k[t] + w[t]) & 0xFFFFFFFF
        s0 = sha256_rotate_right(a, 2) ^ sha256_rotate_right(a, 13) ^ sha256_rotate_right(a, 22)
        maj = (a & b) ^ (a & c) ^ (b & c)
        temp2 = (s0 + maj) & 0xFFFFFFFF

        h = g
        g = f
        f = e
        e = (d + temp1) & 0xFFFFFFFF
        d = c
        c = b
        b = a
        a = (temp1 + temp2) & 0xFFFFFFFF

    # Update hash values
    h0 = (h0 + a) & 0xFFFFFFFF
    h1 = (h1 + b) & 0xFFFFFFFF
    h2 = (h2 + c) & 0xFFFFFFFF
    h3 = (h3 + d) & 0xFFFFFFFF
    h4 = (h4 + e) & 0xFFFFFFFF
    h5 = (h5 + f) & 0xFFFFFFFF
    h6 = (h6 + g) & 0xFFFFFFFF
    h7 = (h7 + h) & 0xFFFFFFFF

    return [h0, h1, h2, h3, h4, h5, h6, h7]

def animate_sha256(block_header_hex):
    output = ""

    clear_screen()
    
    # Convert block header to binary
    input_bits = ''.join(format(int(block_header_hex[i:i+2], 16), '08b') for i in range(0, len(block_header_hex), 2))
    nonce_bits = ''.join(format(int(block_header_hex[-8:][i:i+2], 16), '08b') for i in range(0, 8, 2))
    
    nonce_start_index = len(input_bits) - len(nonce_bits)
    message_length_without_nonce = len(input_bits) - len(nonce_bits)
    nonce_length = len(nonce_bits)
    
    output += f"Hashing the Bitcoin block header: {block_header_hex}\n\n"
    output += f"Input length (in bits): {len(input_bits)}\n"
    output += f"Message length without nonce (in bits): {message_length_without_nonce}\n"
    output += f"Nonce length (in bits): {nonce_length}\n"
    output += f"Nonce starts at bit index: {nonce_start_index}\n\n"

    # Step 1: Convert input header to binary
    colored_binary_string = (
        ''.join(colored(bit, 'yellow') if i < len(input_bits) - len(nonce_bits) else colored(bit, 'blue') if i >= nonce_start_index else colored(bit, 'red')
                for i, bit in enumerate(input_bits))
    )
    output += "Step 1: Convert input header to binary\n"
    output += f"Binary representation:\n{colored_binary_string}\n\n"

    # Step 2: Padding the input
    padding = '1' + '0' * ((447 - len(input_bits)) % 512) + format(len(input_bits), '064b')
    padded_message = input_bits + padding
    colored_padded_message = (
        ''.join(colored(bit, 'yellow') if i < len(input_bits) else colored(bit, 'blue') if i >= len(input_bits) and i < len(padded_message) - 32 else colored(bit, 'red')
                for i, bit in enumerate(padded_message))
    )
    output += "Step 2: Padding the input\n"
    output += f"Padded message length (in bits): {len(padded_message)}\n"
    output += f"Padded message:\n{colored_padded_message}\n\n"

    # Step 3: Initialize hash values (h0-h7)
    h = sha256_initial_hash_values()
    output += "Step 3: Initialize hash values (h0-h7)\n"
    output += '\n'.join(f"h{i} = {format(h[i], '08x')}" for i in range(8)) + "\n\n"

    # Step 4: Process message in 512-bit chunks
    chunk_size = 512
    chunks = [padded_message[i:i+chunk_size] for i in range(0, len(padded_message), chunk_size)]
    output += f"Step 4: Process message in {chunk_size}-bit chunks\n"
    output += f"Number of chunks: {len(chunks)}\n\n"
    
    # Message schedule array (W) and mixing (a-h)
    for chunk_index, chunk in enumerate(chunks):
        output += f"Processing chunk {chunk_index + 1}/{len(chunks)}:\n"
        output += ''.join(
            colored(bit, 'yellow') if i < len(input_bits) else colored(bit, 'blue') if i >= len(input_bits) and i < len(padded_message) - 32 else colored(bit, 'red')
            for i, bit in enumerate(chunk)
        ) + "\n"
        original_length = len([bit for bit in chunk if bit in {'0', '1'}])
        output += f"Original message length in this chunk: {original_length} bits\n\n"

        # Construct message schedule W
        w = [0] * 64
        for t in range(16):
            w[t] = int(chunk[t * 32:(t + 1) * 32], 2)
        for t in range(16, 64):
            s0 = sha256_rotate_right(w[t - 15], 7) ^ sha256_rotate_right(w[t - 15], 18) ^ (w[t - 15] >> 3)
            s1 = sha256_rotate_right(w[t - 2], 17) ^ sha256_rotate_right(w[t - 2], 19) ^ (w[t - 2] >> 10)
            w[t] = (w[t - 16] + s0 + w[t - 7] + s1) & 0xFFFFFFFF

        # Compression function
        a, b, c, d, e, f, g, h = h
        for t in range(64):
            s0 = sha256_rotate_right(a, 2) ^ sha256_rotate_right(a, 13) ^ sha256_rotate_right(a, 22)
            maj = (a & b) ^ (a & c) ^ (b & c)
            t2 = s0 + maj
            s1 = sha256_rotate_right(e, 6) ^ sha256_rotate_right(e, 11) ^ sha256_rotate_right(e, 25)
            ch = (e & f) ^ ((~e) & g)
            t1 = h + s1 + ch + sha256_constants()[t] + w[t]
            
            h = g
            g = f
            f = e
            e = (d + t1) & 0xFFFFFFFF
            d = c
            c = b
            b = a
            a = (t1 + t2) & 0xFFFFFFFF
        
        # Update hash values
        h0 = (h0 + a) & 0xFFFFFFFF
        h1 = (h1 + b) & 0xFFFFFFFF
        h2 = (h2 + c) & 0xFFFFFFFF
        h3 = (h3 + d) & 0xFFFFFFFF
        h4 = (h4 + e) & 0xFFFFFFFF
        h5 = (h5 + f) & 0xFFFFFFFF
        h6 = (h6 + g) & 0xFFFFFFFF
        h7 = (h7 + h) & 0xFFFFFFFF
        
        # Print compression details
        output += f"Compression for chunk {chunk_index + 1}:\n"
        output += f"h0 = {format(h0, '08x')}\n"
        output += f"h1 = {format(h1, '08x')}\n"
        output += f"h2 = {format(h2, '08x')}\n"
        output += f"h3 = {format(h3, '08x')}\n"
        output += f"h4 = {format(h4, '08x')}\n"
        output += f"h5 = {format(h5, '08x')}\n"
        output += f"h6 = {format(h6, '08x')}\n"
        output += f"h7 = {format(h7, '08x')}\n\n"
    
    # Final hash value
    final_hash = hashlib.sha256(binascii.unhexlify(block_header_hex)).hexdigest()
    output += "Final SHA-256 hash:\n"
    output += f"{final_hash}\n\n"

    # Print all output at once
    print(output)

# Example Bitcoin block header (version 2, previous block hash, merkle root, timestamp, difficulty, nonce)
block_header_hex = "020000208ec39428b17323fa0dfc1c441c03d80fe7fda1288597693a0000000000000000c397e508725a663a56e52c1e7f56c7c6b889ffbdc2f1d4f405c78ff4b53a05b81410b7774d990193b03b0300"

# Call the function with the example block header
animate_sha256(block_header_hex)
